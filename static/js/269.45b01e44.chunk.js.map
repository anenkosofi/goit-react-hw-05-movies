{"version":3,"file":"static/js/269.45b01e44.chunk.js","mappings":"qPAEMA,E,QAAaC,GAAAA,WAAH,sR,SCoChB,EAhCgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBN,GAASO,MAAK,gBAAGC,EAAH,EAAGA,QAAH,OAAiBJ,EAAWI,EAA5B,GAC/B,GAAE,CAACR,IAECG,GAIH,wBACsB,IAAnBA,EAAQM,OACPN,EAAQO,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,IAAxB,OACV,yBACE,UAAChB,EAAD,CAAYiB,KAAMD,EAAlB,WACE,uCAAeF,MACf,0BACE,SAAC,MAAD,CAAaI,KAAM,KAClBH,SALEF,EADC,KAYZ,wEAjBG,IAqBV,C,yLCpCKM,EAAW,+BACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,oGACyBC,MAAM,GAAD,OACvBH,EADuB,uCACgBC,IAF9C,WACQG,EADR,QAIgBC,GAJhB,sBAKU,IAAIC,MAAMF,EAASG,QAL7B,uBAOeH,EAASI,OAPxB,mHAUeC,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4Bf,GAA5B,uFACyBS,MAAM,GAAD,OAAIH,EAAJ,kBAAsBN,EAAtB,oBAAoCO,IADlE,WACQG,EADR,QAEgBC,GAFhB,sBAGU,IAAIC,MAAMF,EAASG,QAH7B,uBAKeH,EAASI,OALxB,mHAQeE,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BhB,GAA5B,uFACyBS,MAAM,GAAD,OACvBH,EADuB,kBACLN,EADK,4BACiBO,IAF/C,WACQG,EADR,QAIgBC,GAJhB,sBAKU,IAAIC,MAAMF,EAASG,QAL7B,uBAOeH,EAASI,OAPxB,mHAUenB,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BK,GAA/B,uFACyBS,MAAM,GAAD,OACvBH,EADuB,kBACLN,EADK,4BACiBO,IAF/C,WACQG,EADR,QAIgBC,GAJhB,sBAKU,IAAIC,MAAMF,EAASG,QAL7B,uBAOeH,EAASI,OAPxB,mHAUeG,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BC,GAA/B,uFACyBT,MAAM,GAAD,OACvBH,EADuB,iCACUC,EADV,kBAC2BW,IAFzD,WACQR,EADR,QAIgBC,GAJhB,sBAKU,IAAIC,MAAMF,EAASG,QAL7B,uBAOeH,EAASI,OAPxB,0G","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.js","services/movieApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst Blockquote = styled.blockquote`\n  position: relative;\n  font-size: 16px;\n  font-style: italic;\n  letter-spacing: 1px;\n  line-height: 1.2;\n  text-align: center;\n\n  p {\n    margin-top: 16px;\n  }\n\n  svg {\n    margin-right: 16px;\n  }\n\n  cite {\n    font-style: normal;\n  }\n`;\n\nexport { Blockquote };\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { FaQuoteLeft } from 'react-icons/fa';\nimport { getMovieReviews } from 'services/movieApi';\nimport { Blockquote } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    getMovieReviews(movieId).then(({ results }) => setReviews(results));\n  }, [movieId]);\n\n  if (!reviews) {\n    return null;\n  }\n  return (\n    <ul>\n      {reviews.length !== 0 ? (\n        reviews.map(({ id, author, content, url }) => (\n          <li key={id}>\n            <Blockquote cite={url}>\n              <cite>Author: {author}</cite>\n              <p>\n                <FaQuoteLeft size={24} />\n                {content}\n              </p>\n            </Blockquote>\n          </li>\n        ))\n      ) : (\n        <p>We do not have any reviews for this movie.</p>\n      )}\n    </ul>\n  );\n};\n\nexport default Reviews;\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'bfcd7a06a5bb09fb5aafe756d2f60f73';\n\nasync function getTrendingMovies() {\n  const response = await fetch(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n  return await response.json();\n}\n\nasync function getMovieById(id) {\n  const response = await fetch(`${BASE_URL}/movie/${id}?api_key=${API_KEY}`);\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n  return await response.json();\n}\n\nasync function getMovieCast(id) {\n  const response = await fetch(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\n  );\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n  return await response.json();\n}\n\nasync function getMovieReviews(id) {\n  const response = await fetch(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n  return await response.json();\n}\n\nasync function getMovieByQuery(query) {\n  const response = await fetch(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n  return await response.json();\n}\n\nexport {\n  getTrendingMovies,\n  getMovieById,\n  getMovieCast,\n  getMovieReviews,\n  getMovieByQuery,\n};\n"],"names":["Blockquote","styled","movieId","useParams","useState","reviews","setReviews","useEffect","getMovieReviews","then","results","length","map","id","author","content","url","cite","size","BASE_URL","API_KEY","getTrendingMovies","fetch","response","ok","Error","status","json","getMovieById","getMovieCast","getMovieByQuery","query"],"sourceRoot":""}